str(churn_anovaRes)
xkabledply(churn_anovaRes, title = "ANOVA comparison between the models")
loadPkg("faraway")
model.final <- lm(churn~age+gender+country,data=train)
summary(model.final)
coef(model.final)
confint(model.final)
xkabledply(model.final, title = "Model summary")
loadPkg("faraway")
train$country <- factor(train$country)
model.final <- lm(churn~age+gender+country,data=train)
summary(model.final)
coef(model.final)
confint(model.final)
xkabledply(model.final, title = "Model summary")
churnLogit <- glm(churn ~ age + gender + country, data = train, family = "binomial")
train$gender<- factor(train$gender)
train$country <- factor(train$country)
churnLogit <- glm(churn ~ age + gender + country, data = train, family = "binomial")
train$gender<- factor(train$gender)
train$country <- factor(train$country)
train$churn<- factor(train$churn)
churnLogit <- glm(churn ~ age + gender + country, data = train, family = "binomial")
summary(churnLogit)
xkabledply(churnLogit, title = paste("Logistic Regression :", format(formula(churnLogit)) ))
loadPkg("faraway")
train$country <- factor(train$country)
model.final <- lm(churn~age+gender+country,data=train)
summary(model.final)
loadPkg("faraway")
train$country <- factor(train$country)
model.final <- lm(churn~age+gender+country,data=train)
summary(model.final)
library(ezids)
loadPkg("Hmisc")
library(dplyr)
loadPkg("MASS")
library(ggplot2)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
churn_data<-data.frame(read.csv("Bank_Customer_Churn_Prediction.csv",header=TRUE)) #reading the file into data frame
str(churn_data) #printing the data frame structure
loadPkg("faraway")
train$country <- factor(train$country)
loadPkg("faraway")
model.final <- lm(churn~age+gender+country,data=train)
library(ROSE)
sum(churn_data$country == 'France')
sum(churn_data$country == 'Germany')
sum(churn_data$country == 'Spain')
ind <- sample(2, nrow(churn_data), replace = TRUE, prob = c(0.7, 0.3))
train <- churn_data[ind==1,]
test <- churn_data[ind==2,]
data_balanced_over <- ovun.sample(churn ~ ., data = train, method = "over",N = 10000,seed=123)$data
table(data_balanced_over$country)
loadPkg("faraway")
model.final <- lm(churn~age+gender+country,data=train)
summary(model.final)
coef(model.final)
confint(model.final)
xkabledply(model.final, title = "Model summary")
loadPkg("faraway")
model.final <- lm(churn~.,data=train)
summary(model.final)
coef(model.final)
confint(model.final)
xkabledply(model.final, title = "Model summary")
loadPkg("faraway")
model.final <- lm(churn~age+gender+country,data=train)
summary(model.final)
coef(model.final)
confint(model.final)
xkabledply(model.final, title = "Model summary")
loadPkg("faraway")
model.final1 <- lm(churn~products_number+active_member ,data=train)
summary(model.final1)
coef(model.final1)
confint(model.final1)
xkabledply(model.final1, title = "Model summary")
loadPkg("faraway")
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
model.final1 <- lm(churn~products_number+active_member ,data=train)
summary(model.final1)
coef(model.final1)
confint(model.final1)
xkabledply(model.final1, title = "Model summary")
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
train$tenure <- factor(train$tenure)
churnLogit <- glm(churn ~ ., data = train, family = "binomial")
summary(churnLogit)
xkabledply(churnLogit, title = paste("Logistic Regression :", format(formula(churnLogit)) ))
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
train$tenure <- factor(train$tenure)
churnLogit <- glm(churn ~ ., data = train, family = "binomial")
summary(churnLogit)
xkabledply(churnLogit, title = paste("Logistic Regression :", format(formula(churnLogit)) ))
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
train$tenure <- factor(train$tenure)
churnLogit <- glm(churn ~ ., data = train, family = "binomial")
summary(churnLogit)
xkabledply(churnLogit, title = paste("Logistic Regression :", format(formula(churnLogit)) ))
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
train$tenure <- factor(train$tenure)
churnLogit <- glm(churn ~ ., data = train, family = "binomial")
summary(churnLogit)
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
train$tenure <- factor(train$tenure)
churnLogit <- glm(churn ~ ., data = train, family = "binomial")
summary(churnLogit)
xkabledply(churnLogit, title = paste("Logistic Regression :", format(formula(churnLogit)) ))
xkabledply(churnLogit, title = paste("Logistic Regression :", format(formula(churnLogit)) ))
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
train$tenure <- factor(train$tenure)
churnLogit <- glm(churn ~ ., data = train, family = "binomial")
summary(churnLogit)
loadPkg("faraway")
model.final <- lm(churn~age+gender+country,data=train)
summary(model.final)
coef(model.final)
confint(model.final)
xkabledply(model.final, title = "Model summary")
loadPkg("faraway")
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
model.final1 <- lm(churn~products_number+active_member ,data=train)
summary(model.final1)
coef(model.final1)
confint(model.final1)
xkabledply(model.final1, title = "Model summary")
train$products_number <- factor(train$products_number)
train$active_member <- factor(train$active_member)
train$tenure <- factor(train$tenure)
churnLogit <- glm(churn ~ ., data = train, family = "binomial")
summary(churnLogit)
expcoeff = exp(coef(churnLogit))
# expcoeff
xkabledply( as.table(expcoeff), title = "Exponential of coefficients in Logit Reg" )
## CIs using profiled log-likelihood
# confint(admitLogit)
xkabledply( confint(churnLogit), title = "CIs using profiled log-likelihood" )
## CIs using standard errors
# confint.default(admitLogit)
xkabledply( confint.default(churnLogit), title = "CIs using standard errors" )
loadPkg("regclass")
# confusion_matrix(admitLogit)
xkabledply( confusion_matrix(churnLogit), title = "Confusion matrix from Logit Model" )
unloadPkg("regclass")
library(ezids)
loadPkg("Hmisc")
library(dplyr)
loadPkg("MASS")
library(ggplot2)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
churn_data<-data.frame(read.csv("Bank_Customer_Churn_Prediction.csv",header=TRUE)) #reading the file into data frame
str(churn_data) #printing the data frame structure
corr <- cor(churn_data_numeric$age, churn_data_numeric$churn)
library(ROSE)
sum(churn_data$country == 'France')
sum(churn_data$country == 'Germany')
sum(churn_data$country == 'Spain')
sum(churn_data$churn == 0)
sum(churn_data$churn == 1)
set.seed(123)
ind <- sample(2, nrow(churn_data), replace = TRUE, prob = c(0.7, 0.3))
train <- churn_data[ind==1,]
test <- churn_data[ind==2,]
over <- ovun.sample(churn~., data = train, method = "over", N = 10000,seed=123)$data
table(over$country)
table(over$churn)
library(ROSE)
sum(churn_data$country == 'France')
sum(churn_data$country == 'Germany')
sum(churn_data$country == 'Spain')
ind <- sample(2, nrow(churn_data), replace = TRUE, prob = c(0.7, 0.3))
train <- churn_data[ind==1,]
test <- churn_data[ind==2,]
data_balanced_over <- ovun.sample(churn ~ ., data = train, method = "over",N = 10000,seed=123)$data
table(data_balanced_over$country)
prop.table( table(churn_data$churn) )
str(churn_data)
churn_data_pc<-churn_data
churn_data_pc$country[churn_data$country == 'France'] <- 0
churn_data_pc$country[churn_data$country == 'Germany'] <- 1
churn_data_pc$country[churn_data$country == 'Spain'] <- 2
churn_data_pc$gender[churn_data$gender == 'Male'] <- 0
churn_data_pc$gender[churn_data$gender == 'Female'] <- 1
churn_data_pc$country = as.numeric(churn_data_pc$country)
churn_data_pc$gender = as.numeric(churn_data_pc$gender)
churn_data_pc <- churn_data_pc[-c(11)]
str(churn_data_pc)
churn_data_scale <- data.frame(scale(churn_data_pc))
xkabledply(cor(churn_data_scale))
xkabledply(cov(churn_data_scale))
pr.out=prcomp(churn_data_pc, scale =TRUE)
print("Case: z-score/scaled")
summary(pr.out)
pr.out$rotation
nrow(train)
prop.table( table(train$churn) )
biplot(pr.out, scale = 0)
pr.var <- (pr.out$sdev^2)
pve <- pr.var/sum(pr.var)
plot(cumsum(pve), xlab="Principal Component (standardized)", ylab ="Cumulative Proportion of Variance Explained",ylim=c(0,1),type="b")
model.final <- lm(churn~age+gender+country,data=churn_data_pc)
model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(model.final)
model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(model.final)
xkabledply(model.final, title = " Model summary")
model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(model.final)
xkabledply(model.final, title = " Model summary")
str(summary(model.final))
model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(model.final)
xkabledply(model.final, title = " Model summary")
str(model.final)
churn_model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(churn_model.final)
xkabledply(churn_model.final, title = " Model summary")
coef(churn_model.final)
confint(churn_model.final)
churn_model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(churn_model.final)
xkabledply(churn_model.final, title = " Model summary")
coef(churn_model.final)
confint(churn_model.final)
loadPkg("ggplot2")
ggplot(churn_model.final,aes(final,pred))+geom_point(aes(final,pred))+geom_line(aes(pred), colour="red", size=1)
churn_model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(churn_model.final)
xkabledply(churn_model.final, title = " Model summary")
coef(churn_model.final)
confint(churn_model.final)
loadPkg("ggplot2")
ggplot(churn_model.final,aes(churn,pred))+geom_point(aes(churn,pred))+geom_line(aes(pred), colour="red", size=1)
loadPkg("modelr")
df.with.predfin.from.model <- add_predictions(stat500,model.final)
loadPkg("modelr")
df.with.predfin.from.model <- add_predictions(churn_data_pc,churn_model.final)
head(df.with.predfin.from.model)
loadPkg("ggplot2")
ggplot(churn_model.final,aes(churn,pred))+geom_point(aes(churn,pred))+geom_line(aes(pred), colour="red", size=1)
churn_model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(churn_model.final)
xkabledply(churn_model.final, title = " Model summary")
coef(churn_model.final)
confint(churn_model.final)
churn_data_pc$gender <- factor(churn_data_pc$gender)
churn_data_pc$country <- factor(churn_data_pc$country)
admitLogit <- glm(churn ~ age + gender + country, data = churn_data_pc, family = "binomial")
churn_data_pc$gender <- factor(churn_data_pc$gender)
churn_data_pc$country <- factor(churn_data_pc$country)
churnLogit <- glm(churn ~ age + gender + country, data = churn_data_pc, family = "binomial")
summary(churnLogit)
churn_model.final <- lm(churn~age+gender+country,data=churn_data_pc)
summary(churn_model.final)
xkabledply(churn_model.final, title = " Model summary")
coef(churn_model.final)
confint(churn_model.final)
churn_data_pc$gender <- factor(churn_data_pc$gender)
churn_data_pc$country <- factor(churn_data_pc$country)
churnLogit <- glm(churn ~ age + gender + country, data = churn_data_pc, family = "binomial")
summary(churnLogit)
xkabledply(admitLogit, title = paste("Logistic Regression :", format(formula(admitLogit)) ))
churn_data_pc$gender <- factor(churn_data_pc$gender)
churn_data_pc$country <- factor(churn_data_pc$country)
churnLogit <- glm(churn ~ age + gender + country, data = churn_data_pc, family = "binomial")
summary(churnLogit)
xkabledply(churnLogit, title = paste("Logistic Regression :", format(formula(churnLogit)) ))
expcoeff = exp(coef(churnLogit))
# expcoeff
xkabledply( as.table(expcoeff), title = "Exponential of coefficients in Logit Reg" )
## CIs using profiled log-likelihood
# confint(admitLogit)
xkabledply( confint(churnLogit), title = "CIs using profiled log-likelihood" )
## CIs using standard errors
# confint.default(admitLogit)
xkabledply( confint.default(churnLogit), title = "CIs using standard errors" )
loadPkg("regclass")
# confusion_matrix(admitLogit)
xkabledply( confusion_matrix(churnLogit), title = "Confusion matrix from Logit Model" )
unloadPkg("regclass")
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
churnLogitHoslem = hoslem.test(churn_data_pc$churn, fitted(churnLogit)) # Hosmer and Lemeshow test, a chi-squared test
unloadPkg("ResourceSelection")
churnLogitHoslem
# Have not found a good way to display it.
loadPkg("ResourceSelection")
churnLogitHoslem = hoslem.test(churn_data_pc$churn, fitted(churnLogit))
unloadPkg("ResourceSelection")
churnLogitHoslem
churn_model1.final <- lm(churn~products_number+active_member,data=churn_data_pc)
summary(churn_model1.final)
xkabledply(churn_model1.final, title = " Model summary")
coef(churn_model1.final)
confint(churn_model1.final)
churn_data_pc$products_number <- factor(churn_data_pc$products_number)
churnLogit1 <- glm(churn ~ products_number+active_member, data = churn_data_pc, family = "binomial")
summary(churnLogit1)
xkabledply(churnLogit1, title = paste("Logistic Regression :", format(formula(churnLogit1)) ))
expcoeff = exp(coef(churnLogit1))
xkabledply( as.table(expcoeff), title = "Exponential of coefficients in Logit Reg" )
xkabledply( confint(churnLogit1), title = "CIs using profiled log-likelihood" )
xkabledply( confint.default(churnLogit1), title = "CIs using standard errors" )
loadPkg("regclass")
xkabledply( confusion_matrix(churnLogit1), title = "Confusion matrix from Logit Model" )
unloadPkg("regclass")
loadPkg("ResourceSelection")
churnLogitHoslem = hoslem.test(churn_data_pc$churn, fitted(churnLogit1))
unloadPkg("ResourceSelection")
churnLogitHoslem
churn_age_fit <- lm(churn~ age, data = churn_data_pc)
summary(fit1)
churn_age_fit <- lm(churn~ age, data = churn_data_pc)
summary(churn_age_fit)
churn_age_fit <- lm(churn~ age, data = churn_data_pc)
summary(churn_age_fit)
xkabledply(fit1, title = paste("Model :", format(formula(fit1)) ) )
churn_age_fit <- lm(churn~ age, data = churn_data_pc)
summary(churn_age_fit)
xkabledply(churn_age_fit , title = paste("Model :", format(formula(churn_age_fit )) ) )
plot(churn_age_fit )
churn_agegender_fit <- lm(churn~ age+gender, data = churn_data_pc)
summary(churn_agegender_fit)
xkabledply(churn_agegender_fit , title = paste("Model :", format(formula(churn_agegender_fit)) ) )
plot(churn_agegender_fit)
churn_age_fit <- lm(churn~ age, data = churn_data_pc)
summary(churn_age_fit)
xkabledply(churn_age_fit , title = paste("Model :", format(formula(churn_age_fit )) ) )
plot(churn_age_fit )
churn_country_fit <- lm(churn~ age, data = churn_data_pc)
summary(churn_country_fit )
xkabledply(churn_country_fit , title = paste("Model :", format(formula(churn_country_fit )) ) )
plot(churn_country_fit )
churn_country_fit <- lm(churn~ age, data = churn_data_pc)
summary(churn_country_fit )
xkabledply(churn_country_fit , title = paste("Model :", format(formula(churn_country_fit )) ) )
xkablevif(churn_country_fit )
plot(churn_country_fit )
churn_country_fit <- lm(churn~ age+gender+country, data = churn_data_pc)
summary(churn_country_fit )
xkabledply(churn_country_fit , title = paste("Model :", format(formula(churn_country_fit )) ) )
xkablevif(churn_country_fit )
plot(churn_country_fit )
churn_gender_fit <- lm(churn~ age+gender, data = churn_data_pc)
summary(churn_gender_fit)
xkabledply(churn_gender_fit , title = paste("Model :", format(formula(churn_gender_fit)) ) )
xkablevif(churn_gender_fit )
plot(churn_gender_fit)
churn_age_fit <- lm(churn~ age, data = churn_data_pc)
summary(churn_age_fit)
xkabledply(churn_age_fit , title = paste("Model :", format(formula(churn_age_fit )) ) )
xkablevif(churn_age_fit )
plot(churn_age_fit )
anova(churn_age_fit ,churn_gender_fit,churn_country_fit) -> churnanovaRes
churnanovaRes
str(churnanovaRes)
xkabledply(anovaRes, title = "ANOVA comparison between the models")
anova(churn_age_fit ,churn_gender_fit,churn_country_fit) -> churnanovaRes
churnanovaRes
str(churnanovaRes)
xkabledply(churnanovaRes, title = "ANOVA comparison between the models")
library(ezids)
loadPkg("Hmisc")
library(dplyr)
loadPkg("MASS")
library(ggplot2)
loadPkg("ISLR")
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
library(ezids)
loadPkg("Hmisc")
library(dplyr)
loadPkg("MASS")
library(ggplot2)
library(pkgload)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
loadPkg("leaps")
reg.churn <- regsubsets(churn~. , data = churn_data_pc, nvmax = 10, nbest = 2, method = "exhaustive")
plot(reg.churn , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churn , scale = "r2", main = "R^2")
plot(reg.churn , scale = "bic", main = "BIC")
plot(reg.churn , scale = "Cp", main = "Cp")
summary(reg.churn )
loadPkg("leaps")
reg.churn <- regsubsets(churn~. , data = churn_data_pc, nvmax = 13, nbest = 2, method = "exhaustive")
plot(reg.churn , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churn , scale = "r2", main = "R^2")
plot(reg.churn , scale = "bic", main = "BIC")
plot(reg.churn , scale = "Cp", main = "Cp")
summary(reg.churn )
loadPkg("leaps")
reg.churn <- regsubsets(churn~-customer_id. , data = churn_data_pc, nvmax = 10, nbest = 2, method = "exhaustive")
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-customer_id. , data = churn_data_pc, nvmax = 10, nbest = 2, method = "exhaustive")
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-Customer ID . , data = churn_data_pc, nvmax = 10, nbest = 2, method = "exhaustive")
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-"Customer ID " , data = churn_data_pc, nvmax = 10, nbest = 2, method = "exhaustive")
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-Customer ID , data = churn_data_pc, nvmax = 10, nbest = 2, method = "exhaustive")
churn_data<-data.frame(read.csv("Bank_Customer_Churn_Prediction.csv",header=TRUE)) #reading the file into data frame
str(churn_data) #printing the data frame structure
str(churn_data)
churn_data_pc<-churn_data
churn_data_pc$country[churn_data$country == 'France'] <- 0
churn_data_pc$country[churn_data$country == 'Germany'] <- 1
churn_data_pc$country[churn_data$country == 'Spain'] <- 2
churn_data_pc$gender[churn_data$gender == 'Male'] <- 0
churn_data_pc$gender[churn_data$gender == 'Female'] <- 1
churn_data_pc$country = as.numeric(churn_data_pc$country)
churn_data_pc$gender = as.numeric(churn_data_pc$gender)
churn_data_pc <- churn_data_pc[-c(11)]
str(churn_data_pc)
churn_data_scale <- data.frame(scale(churn_data_pc))
xkabledply(cor(churn_data_scale))
xkabledply(cov(churn_data_scale))
loadPkg("leaps")
reg.churn <- regsubsets(churn~., data = churn_data_pc, nvmax = 10, nbest = 2, method = "exhaustive")
plot(reg.churn , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churn , scale = "r2", main = "R^2")
plot(reg.churn , scale = "bic", main = "BIC")
plot(reg.churn , scale = "Cp", main = "Cp")
summary(reg.churn )
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-customer_id, data = churn_data_pc, nvmax = 10, nbest = 2, method = "exhaustive")
plot(reg.churn , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churn , scale = "r2", main = "R^2")
plot(reg.churn , scale = "bic", main = "BIC")
plot(reg.churn , scale = "Cp", main = "Cp")
summary(reg.churn )
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-customer_id, data = churn_data_pc, nvmax = 13, nbest = 2, method = "exhaustive")
plot(reg.churn , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churn , scale = "r2", main = "R^2")
plot(reg.churn , scale = "bic", main = "BIC")
plot(reg.churn , scale = "Cp", main = "Cp")
summary(reg.churn )
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-customer_id, data = churn_data_pc, nvmax =5, nbest = 2, method = "exhaustive")
plot(reg.churn , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churn , scale = "r2", main = "R^2")
plot(reg.churn , scale = "bic", main = "BIC")
plot(reg.churn , scale = "Cp", main = "Cp")
summary(reg.churn )
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-customer_id, data = churn_data_pc, nvmax =9, nbest = 2, method = "exhaustive")
plot(reg.churn , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churn , scale = "r2", main = "R^2")
plot(reg.churn , scale = "bic", main = "BIC")
plot(reg.churn , scale = "Cp", main = "Cp")
summary(reg.churn )
loadPkg("leaps")
reg.churn <- regsubsets(churn~.-customer_id, data = churn_data_pc, nvmax =9, nbest = 1, method = "exhaustive")
plot(reg.churn , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churn , scale = "r2", main = "R^2")
plot(reg.churn , scale = "bic", main = "BIC")
plot(reg.churn , scale = "Cp", main = "Cp")
summary(reg.churn )
reg.churnforward <- regsubsets(churn~.-customer_id, data = churn_data_pc, nvmax =9, nbest = 1, method = "forward")
plot(reg.churnforward , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churnforward , scale = "bic", main = "BIC")
plot(reg.churnforward , scale = "Cp", main = "Cp")
summary(reg.churnforward)
reg.churnforward <- regsubsets(churn~.-customer_id, data = churn_data_pc, nvmax =9, nbest = 1, method = "forward")
plot(reg.churnforward , scale = "adjr2", main = "Adjusted R^2")
plot(reg.churnforward , scale = "bic", main = "BIC")
plot(reg.churnforward , scale = "Cp", main = "Cp")
summary(reg.churnforward)
reg.churnback <- regsubsets(churn~.-customer_id, data = churn_data_pc, method = "backward", nvmax = 9, nbest = 2)
plot(reg.churnback, scale = "adjr2", main = "Adjusted R^2")
plot(reg.churnback, scale = "bic", main = "BIC")
plot(reg.churnback, scale = "Cp", main = "Cp")
summary(reg.churnback)
reg.churnseqrep <- regsubsets(churn~.-customer_id, data =churn_data_pc, nvmax = 9, nbest = 2 , method = "seqrep")
plot(reg.churnseqrep, scale = "adjr2", main = "Adjusted R^2")
plot(reg.churnseqrep, scale = "bic", main = "BIC")
plot(reg.churnseqrep, scale = "Cp", main = "Cp")
#
# Mallow Cp
subsets(reg.churn, statistic="cp", legend = FALSE, min.size = 4, main = "Mallow Cp")
#
# Mallow Cp
loadPkg("car")
subsets(reg.churn, statistic="cp", legend = FALSE, min.size = 4, main = "Mallow Cp")
abline(a = 1, b = 1, lty = 3)
# a: intercept; b: slope,
# lty: line-type (0=blank, 1=solid (default), 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash)
#
# this output gives the list of variables and their abbreviations
#
# Mallow Cp
loadPkg("car")
summaryRegForward = summary(reg.churn,)
# Adjusted R2
car::subsets(reg.churn,, statistic="adjr2", legend = FALSE, min.size = 2, main = "Adjusted R^2")
subsets(reg.churn, statistic="cp", legend = FALSE, min.size = 4, main = "Mallow Cp")
abline(a = 1, b = 1, lty = 3)
# a: intercept; b: slope,
# lty: line-type (0=blank, 1=solid (default), 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash)
#
# this output gives the list of variables and their abbreviations
